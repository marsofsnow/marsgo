syntax = "v2"

// 获取sms code
type GetCodeReq {
    Transport string `path:"transport"`
    Number    string `path:"number"`
    Client    string `form:"client,optional"`
    Captcha   string `form:"captcha,optional"`
    Challenge string `form:"challenge,optional"`
}


// 设备功能集
type DeviceCapabilities  {
    UUID bool `json:"uuid,optional"`
}


type AccountAttributes {
    SignalingKey string `json:"signalingKey,optional"`
    FetchesMessages                bool                `json:"fetchesMessages"`
    RegistrationID                 int                 `json:"registrationId"`
    Name                           string              `json:"name,optional"`
    Pin                            string              `json:"pin,optional"`
    RegistrationLock               string              `json:"registrationLock,optional"`
    UnidentifiedAccessKey          string              `json:"unidentifiedAccessKey,optional"`
    UnrestrictedUnidentifiedAccess bool                `json:"unrestrictedUnidentifiedAccess,optional"`
    Capabilities                   DeviceCapabilities  `json:"capabilities,optional"`
}

type VerifyAccountReq {
    VerificationCode string `path:"verificationCode"`
    SignalingKey string `json:"signalingKey,optional"`
    FetchesMessages                bool                `json:"fetchesMessages"`
    RegistrationID                 int                 `json:"registrationId"`
    Name                           string              `json:"name,optional"`
    Pin                            string              `json:"pin,optional"`
    RegistrationLock               string              `json:"registrationLock,optional"`
    UnidentifiedAccessKey          string              `json:"unidentifiedAccessKey,optional"`
    UnrestrictedUnidentifiedAccess bool                `json:"unrestrictedUnidentifiedAccess,optional"`
    Capabilities                   DeviceCapabilities  `json:"capabilities,optional"`
}

type VerifyAccountRes{
    UUID string `json:"uuid"`
}





@server(
    group: accounts
)
service signalserver-api {
    @handler GetCodeReqHandler
    get /v1/accounts/:transport/code/:number (GetCodeReq) returns ()

    @handler VerifyAccountHandler
    put /v1/accounts/code/:verificationCode (VerifyAccountReq) returns (VerifyAccountRes)
}

@server(
    middleware : CheckBasicAuth
    group: accounts
)
service signalserver-api {
    @handler TestHandler
    get /v2/accounts/:transport/code/:number (GetCodeReq) returns ()
}











