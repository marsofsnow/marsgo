syntax = "v2"

type IncomingMessagex {
    Content string `json:"content"`
    Type int `json:"type"`
    DestinationDeviceId int `json:"destinationDeviceId,default=1"` //发到哪一个设备
    DestinationRegistrationId int `json:"destinationRegistrationId"`
    Destination string  `json:"destination,optional"`
    Body   string `json:"body,optional"`
    Relay string `json:"relay,optional"`
}



type PutMessagesReq{
    Destination string  `path:"destination" json:"destination"`
    Online bool `json:"online"`
    Timestamp int64 `json:"timestamp"`
    Messages []IncomingMessagex `json:"messages"`
}
type PutMessagesRes{
    NeedsSync bool `json:"needsSync"`
}


type OutcomingMessagex {
    Id int64  `json:"id"`
    Cached bool `json:"cached"`
    Guid string `json:"guid"`
    Type int `json:"type"`
    Relay string `json:"relay"`
    Timestamp int64 `json:"timestamp"`
    Source string `json:"source"`
    SourceUuid string `json:"sourceUuid"`
    SourceDevice int64 `json:"sourceDevice"`
    Message string  `json:"message"`
    Content string `json:"content"`
    ServerTimestamp int64  `json:"serverTimestamp"`
}

type GetPendingMsgsReq{

}

type GetPendingMsgsRes{
    List []OutcomingMessagex `json:"messages"`
    More bool `json:"more"`
}


type (
    Envelope {
        xtype int `json:"type"`
        source string `json:"source"`
        sourceUuid string `json:"sourceUuid"`
        sourceDevice int `json:"sourceDevice"`
        relay string   `json:"relay"`
        timestamp uint64 `json:"timestamp"`
        legacyMessage string   `json:"legacyMessage"`
        content string `json:"content"`
        serverGuid string `json:"guid"`
        serverTimestamp uint64 `json:"serverTimestamp"`

    }

    PubsubMessage{
        xtype int `json:"type"`
        content Envelope `json:"envelop"`
    }
)





@server(
    //jwt: Auth
    //middleware:UserNameCheck
    middleware :CheckBasicAuth
    group: textsecret_messages

)
service signalserver-api {


    @handler GetMsgsHandler
    get /v1/messages () returns (GetPendingMsgsRes)

}


@server(
    //jwt: Auth
    //middleware:UserNameCheck
    //middleware :CheckBasicAuth
    group: textsecret_messages

)
service signalserver-api {
    @handler PutMsgsHandler
    put /v1/messages/:destination (PutMessagesReq) returns (PutMessagesRes)
}
