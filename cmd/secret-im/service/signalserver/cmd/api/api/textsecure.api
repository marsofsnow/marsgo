syntax = "v2"



type JwtTokenAdx {
    AccessToken string `json:"accessToken,omitempty"`
    AccessExpire int64 `json:"accessExpire,omitempty"`
    RefreshAfter int64 `json:"refreshAfter,omitempty"`
}

type AdxUserLoginReq {
    Account string `json:"account"` //eos chain username,保证unique
    Sign string `json:"sign"` //  eos 用户用自己的私钥对name的签名

    SignalingKey string `json:"signalingKey,optional"`
    FetchesMessages                bool                `json:"fetchesMessages,default=true"`
    RegistrationID                 int                 `json:"registrationId,optional"`
    Pin                            string              `json:"pin,optional"`
    Name                           string               `json:"name,optional"`
    RegistrationLock               string              `json:"registrationLock,optional"`
    UnidentifiedAccessKey          string              `json:"unidentifiedAccessKey,optional"`
    UnrestrictedUnidentifiedAccess bool                `json:"unrestrictedUnidentifiedAccess,optional"`
    Capabilities                   DeviceCapabilitiesx `json:"capabilities,optional"`
}

// 设备功能集
type DeviceCapabilitiesx  {
    UUID bool `json:"uuid,optional"`
}



type AdxUserLoginRes {
    // TODO: add members here and delete this comment
    JwtTokenAdx
    Uuid string `json:"uuid"`
    IsNew bool `json:"isNew"`
}





@server(
    group: textsecret
)
service  signalserver-api {
    @handler AdxUserLoginHandler
    post /api/v1/textsecret/login (AdxUserLoginReq) returns (AdxUserLoginRes)
}


@server(
    jwt: Auth
    middleware:UserNameCheck
    group: textsecret
)

service  signalserver-api {
    @handler AdxUserWSHandler
    get /api/v1/textsecret/ws () returns ()
}
