// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	accounts "secret-im/service/signalserver/cmd/api/internal/handler/accounts"
	bookstore "secret-im/service/signalserver/cmd/api/internal/handler/bookstore"
	certificate "secret-im/service/signalserver/cmd/api/internal/handler/certificate"
	keys "secret-im/service/signalserver/cmd/api/internal/handler/keys"
	textsecret "secret-im/service/signalserver/cmd/api/internal/handler/textsecret"
	textsecret_keepalive "secret-im/service/signalserver/cmd/api/internal/handler/textsecret_keepalive"
	textsecret_keys "secret-im/service/signalserver/cmd/api/internal/handler/textsecret_keys"
	textsecret_messages "secret-im/service/signalserver/cmd/api/internal/handler/textsecret_messages"
	textsecret_websocket "secret-im/service/signalserver/cmd/api/internal/handler/textsecret_websocket"
	website "secret-im/service/signalserver/cmd/api/internal/handler/website"
	"secret-im/service/signalserver/cmd/api/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/index",
				Handler: IndexHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: website.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: website.LoginHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.UserCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/user/info",
					Handler: website.UserInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/add",
				Handler: bookstore.AddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/check",
				Handler: bookstore.CheckHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/v1/accounts/:transport/code/:number",
				Handler: accounts.GetCodeReqHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/v1/accounts/code/:verificationCode",
				Handler: accounts.VerifyAccountHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckBasicAuth},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/v1/accounts/attributes",
					Handler: accounts.SetattributesHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/accounts/pin",
					Handler: accounts.SetPinHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/accounts/pin",
					Handler: accounts.DelPinHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/accounts/registration_lock",
					Handler: accounts.SetRegLockHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/accounts/registration_lock",
					Handler: accounts.DelRegLockHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/accounts/name",
					Handler: accounts.SetDeviceNameHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/accounts/signaling_key",
					Handler: accounts.DelSignlingKeyHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/accounts/whoami",
					Handler: accounts.GetWhoamiHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/accounts/gcm",
					Handler: accounts.SetGcmRegistrationIDHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/accounts/gcm",
					Handler: accounts.DelGcmRegistrationIDHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/v1/textsecret/login",
				Handler: textsecret.AdxUserLoginHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.UserNameCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/api/v1/textsecret/ws",
					Handler: textsecret.AdxUserWSHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckBasicAuth},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/v1/messages/:destination",
					Handler: textsecret_messages.PutMsgsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/messages",
					Handler: textsecret_messages.GetMsgsHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckBasicAuth},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/v2/keys",
					Handler: textsecret_keys.PutKeysHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v2/keys/:identifier/:deviceId",
					Handler: textsecret_keys.GetKeysHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v2/keys",
					Handler: textsecret_keys.GetKeyCountHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/profile/:accountName",
					Handler: textsecret_keys.PutProfileKeyHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/profile/:accountName",
					Handler: textsecret_keys.GetProfileKeyHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/v2/websocket",
				Handler: textsecret_websocket.WSConnectHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/v1/keepalive",
				Handler: textsecret_keepalive.GetKeepAliveHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckBasicAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/certificate/delivery",
					Handler: certificate.DeliveryHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckBasicAuth},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/v3/keys",
					Handler: keys.PutKeysHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v3/keys",
					Handler: keys.GetKeyCountHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v3/keys/:identifier/:deviceId",
					Handler: keys.GetDeviceKeysHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v3/keys/signed",
					Handler: keys.SetSignedKeyHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v3/keys/signed",
					Handler: keys.GetSignedKeyHandler(serverCtx),
				},
			}...,
		),
	)
}
