// Code generated by goctl. DO NOT EDIT.
package types

type IndexReply struct {
	Resp string `json:"resp"`
}

type RegisterReq struct {
	Username string `json:"username"`
	Mobile   string `json:"mobile"`
	Password string `json:"password"`
}

type LoginReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type UserReply struct {
	Id       int64  `json:"id"`
	Username string `json:"username"`
	Mobile   string `json:"mobile"`
	Nickname string `json:"nickname"`
	Gender   string `json:"gender"`
	JwtToken
}

type JwtToken struct {
	AccessToken  string `json:"accessToken,omitempty"`
	AccessExpire int64  `json:"accessExpire,omitempty"`
	RefreshAfter int64  `json:"refreshAfter,omitempty"`
}

type AddReq struct {
	Book  string `form:"book"`
	Price int64  `form:"price"`
}

type AddResp struct {
	Ok bool `json:"ok"`
}

type CheckReq struct {
	Book string `form:"book"`
}

type CheckResp struct {
	Found bool  `json:"found"`
	Price int64 `json:"price"`
}

type GetCodeReq struct {
	Transport string `path:"transport"`
	Number    string `path:"number"`
	Client    string `form:"client,optional"`
	Captcha   string `form:"captcha,optional"`
	Challenge string `form:"challenge,optional"`
}

type DeviceCapabilities struct {
	UUID bool `json:"uuid,optional"`
}

type AccountAttributes struct {
	SignalingKey                   string             `json:"signalingKey,optional"`
	FetchesMessages                bool               `json:"fetchesMessages"`
	RegistrationID                 int                `json:"registrationId"`
	Name                           string             `json:"name,optional"`
	Pin                            string             `json:"pin,optional"`
	RegistrationLock               string             `json:"registrationLock,optional"`
	UnidentifiedAccessKey          string             `json:"unidentifiedAccessKey,optional"`
	UnrestrictedUnidentifiedAccess bool               `json:"unrestrictedUnidentifiedAccess,optional"`
	Capabilities                   DeviceCapabilities `json:"capabilities,optional"`
}

type VerifyAccountReq struct {
	VerificationCode               string             `path:"verificationCode"`
	SignalingKey                   string             `json:"signalingKey,optional"`
	FetchesMessages                bool               `json:"fetchesMessages"`
	RegistrationID                 int                `json:"registrationId"`
	Name                           string             `json:"name,optional"`
	Pin                            string             `json:"pin,optional"`
	RegistrationLock               string             `json:"registrationLock,optional"`
	UnidentifiedAccessKey          string             `json:"unidentifiedAccessKey,optional"`
	UnrestrictedUnidentifiedAccess bool               `json:"unrestrictedUnidentifiedAccess,optional"`
	Capabilities                   DeviceCapabilities `json:"capabilities,optional"`
}

type VerifyAccountRes struct {
	UUID string `json:"uuid"`
}

type JwtTokenAdx struct {
	AccessToken  string `json:"accessToken,omitempty"`
	AccessExpire int64  `json:"accessExpire,omitempty"`
	RefreshAfter int64  `json:"refreshAfter,omitempty"`
}

type AdxUserLoginReq struct {
	Name string `json:"name"` //eos chain username,保证unique
	Sign string `json:"sign"` //  eos 用户用自己的私钥对name的签名
}

type AdxUserLoginRes struct {
	JwtTokenAdx
	Uuid  string `json:"uuid"`
	IsNew bool   `json:"isNew"`
}

type IncomingMessagex struct {
	Content                   string `json:"content"`
	Type                      int    `json:"type"`
	DestinationDeviceId       int    `json:"destinationDeviceId,default=1"` //发到哪一个设备
	DestinationRegistrationId int    `json:"destinationRegistrationId"`
	Destination               string `json:"destination,optional"`
	Body                      string `json:"body,optional"`
	Relay                     string `json:"relay,optional"`
}

type PutMessagesReq struct {
	Destination string             `path:"destination" json:"destination"`
	Online      bool               `json:"online"`
	Timestamp   int64              `json:"timestamp"`
	Messages    []IncomingMessagex `json:"messages"`
}

type PutMessagesRes struct {
	NeedsSync   bool     `json:"needsSync"`
	DestContent [][]byte `json:"destContent,optional"`
}

type OutcomingMessagex struct {
	Id              int64  `json:"id"`
	Cached          bool   `json:"cached"`
	Guid            string `json:"guid"`
	Type            int    `json:"type"`
	Relay           string `json:"relay"`
	Timestamp       int64  `json:"timestamp"`
	Source          string `json:"source"`
	SourceUuid      string `json:"sourceUuid"`
	SourceDevice    int64  `json:"sourceDevice"`
	Message         string `json:"message"`
	Content         string `json:"content"`
	ServerTimestamp int64  `json:"serverTimestamp"`
}

type GetPendingMsgsReq struct {
}

type GetPendingMsgsRes struct {
	List []OutcomingMessagex `json:"messages"`
	More bool                `json:"more"`
}

type Envelope struct {
	Xtype           int    `json:"type"`
	Source          string `json:"source"`
	SourceUuid      string `json:"sourceUuid"`
	SourceDevice    int    `json:"sourceDevice"`
	Relay           string `json:"relay"`
	Timestamp       uint64 `json:"timestamp"`
	LegacyMessage   string `json:"legacyMessage"`
	Content         string `json:"content"`
	ServerGuid      string `json:"guid"`
	ServerTimestamp uint64 `json:"serverTimestamp"`
}

type PubsubMessage struct {
	Xtype   int      `json:"type"`
	Content Envelope `json:"envelop"`
}

type PreKeyx struct {
	KeyId     int64  `json:"keyId"`
	PublicKey string `json:"publicKey"`
}

type SignedPrekeyx struct {
	Signature string `json:"signature"`
	KeyId     int64  `json:"keyId"`
	PublicKey string `json:"publicKey"`
}

type PutKeysReqx struct {
	IdentityKey  string        `json:"identityKey"`
	SignedPreKey SignedPrekeyx `json:"signedPreKey"`
	PreKeys      []PreKeyx     `json:"preKeys"`
}

type GetKeysReq struct {
	Identifier string `path:"identifier"`
	DeviceId   string `path:"deviceId"`
}

type PreKeyResponseItem struct {
	DeviceId       int64         `json:"deviceId"`
	RegistrationId int64         `json:"registrationId"`
	PreKey         PreKeyx       `json:"preKey"`
	SignedPrekey   SignedPrekeyx `json:"signedPreKey"`
}

type GetKeysResx struct {
	IdentityKey string               `json:"identityKey"`
	Devices     []PreKeyResponseItem `json:"devices"`
}

type PreKeyCount struct {
	Count int `json:"count"`
}

type PutProfileKeyReq struct {
	AccountName string `path:"accountName"`
	Profilekey  string `json:"profileKey"`
}

type GetProfileKeyReq struct {
	AccountName string `path:"accountName"`
}

type GetProfileKeyRes struct {
	Profilekey  string `json:"profileKey"`
	Uuid        string `json:"uuid"`
	AccountName string `path:"accountName"`
}

type WsConnReq struct {
	Login    string `form:"login,optional"`
	Password string `form:"password,optional"`
}

type DeliveryReq struct {
}

type DeliveryRes struct {
	Certificate string `json:"certificate"`
}

type PreKey struct {
	KeyId     int64  `json:"keyId"`
	PublicKey string `json:"publicKey"`
}

type SignedPrekey struct {
	Signature string `json:"signature"`
	KeyId     int64  `json:"keyId"`
	PublicKey string `json:"publicKey"`
}

type PutKeysReq struct {
	IdentityKey  string       `json:"identityKey"`
	SignedPreKey SignedPrekey `json:"signedPreKey"`
	PreKeys      []PreKey     `json:"preKeys"`
}

type GetKeysReqx struct {
	Identifier string `path:"identifier"`
	DeviceId   string `path:"deviceId"`
}

type PreKeyResponseItemx struct {
	DeviceId       int64        `json:"deviceId"`
	RegistrationId int64        `json:"registrationId"`
	PreKey         PreKey       `json:"preKey"`
	SignedPrekey   SignedPrekey `json:"signedPreKey"`
}

type GetKeysRes struct {
	IdentityKey string                `json:"identityKey"`
	Devices     []PreKeyResponseItemx `json:"devices"`
}

type PreKeyCountx struct {
	Count int `json:"count"`
}
